{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["bootcamps","require","mapCenterPosition","BootcampMap","props","Map","center","zoom","TileLayer","attribution","url","items","map","x","Marker","position","getGeoloc","Popup","name","address","Header","className","count","App","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sdAWMA,EAAwBC,EAAQ,IAShCC,EAAiC,CAAC,SAAU,SAG5CC,EAAc,SAACC,GAAD,OAClB,kBAACC,EAAA,EAAD,CAAKC,OAAQJ,EAAmBK,KAHV,MAIpB,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAELN,EAAMO,MAAMC,KAAI,SAAAC,GAAC,OAChB,kBAACC,EAAA,EAAD,CAAQC,SAAUC,EAAUH,EAAEE,WAC5B,kBAACE,EAAA,EAAD,KACGJ,EAAEK,YAOPF,EAAY,SAACG,GACjB,GAAuB,kBAAZA,EAAsB,CAK/B,MAAO,CAAC,EAAG,GAEb,OAAOA,GAGHC,EAAS,SAAChB,GAAD,OACb,yBAAKiB,UAAU,mBACb,4BAAKjB,EAAMkB,MAAX,4BAIWC,EA3CH,kBACV,yBAAKF,UAAU,OACb,kBAAC,EAAD,CAAaV,MAAOX,IACpB,kBAAC,EAAD,CAAQsB,MAAOtB,EAAUwB,WCJTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43166c2b.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport { LatLngTuple } from 'leaflet'\n\ninterface Bootcamp {\n  name: string;\n  position: LatLngTuple | string;\n}\n\nconst bootcamps: Bootcamp[] = require('./bootcamps.json');\n\nconst App = () => (\n  <div className=\"App\">\n    <BootcampMap items={bootcamps} />\n    <Header count={bootcamps.length} />\n  </div>\n)\n\nconst mapCenterPosition: LatLngTuple = [48.85717, 2.34293]\nconst mapZoom: number = 12.5\n\nconst BootcampMap = (props: {items: Bootcamp[]}) => (\n  <Map center={mapCenterPosition} zoom={mapZoom}>\n    <TileLayer\n      attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    {props.items.map(x =>\n      <Marker position={getGeoloc(x.position)}>\n        <Popup>\n          {x.name}\n        </Popup>\n      </Marker>\n    )}\n  </Map>\n)\n\nconst getGeoloc = (address: LatLngTuple | string): LatLngTuple => {\n  if (typeof address === \"string\") {\n    // https://developers.google.com/maps/documentation/geocoding/\n    const key = \"***************************************\" // TODO: add restrict on API KEY (with the URL) https://console.cloud.google.com/apis/credentials/key/5d606920-bf8b-4691-b332-7bef15f4127d?project=bubbleis-jeu2cordes \n    const url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\" + address + \"&key=\" + key\n    // TODO: https://fr.reactjs.org/docs/faq-ajax.html\n    return [0, 0]\n  }\n  return address\n}\n\nconst Header = (props: {count: number}) => (\n  <div className=\"title-container\">\n    <h1>{props.count} bootcamps Ã  Paris!</h1>\n  </div>\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}